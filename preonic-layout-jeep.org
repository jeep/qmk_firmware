#+TITLE: Preonic Layout Jeep


| C1      | C2             | C3      | C4        | C5        | C6            | C7      | C8      | C9     | C10     | C11     | C12     |
|---------+----------------+---------+-----------+-----------+---------------+---------+---------+--------+---------+---------+---------|
| KC_ESC  | KC_NLCK        | KC_PERC | KC_LPAREN | KC_RPAREN | KC_KP_SLASH   | KC_BSPC | KC_MUTE | KC_APP | KC_PSCR | KC_SLCK | KC_BRK  |
| S(E)    | S(F)           | KC_7    | KC_8      | KC_9      | KC_PAST       | KC_F10  | KC_F11  | KC_F12 | KC_INS  | KC_HOME | KC_PGUP |
| S(C)    | S(D)           | KC_4    | KC_5      | KC_6      | KC_PMNS       | KC_F7   | KC_F8   | KC_F9  | KC_DEL  | KC_END  | KC_PGDN |
| S(A)    | S(B)           | KC_1    | KC_2      | KS_3      | KC_PPLS       | KC_F4   | KC_F5   | KC_F6  | LCTL(-) | KC_UP   | LCTL(=) |
| KC_PENT | LALT_T(KC_SPC) | KC_0    | KC_00     | KC_PDOT   | LT(1,KC_PEQL) | KC_F1   | KC_F2   | KC_F3  | KC_RGHT | KC_DOWN | KC_LEFT |
|---------+----------------+---------+-----------+-----------+---------------+---------+---------+--------+---------+---------+---------|


| C1 | C2 | C3 | C4 | C5    | C6 | C7    | C8    | C9    | C10     | C11     | C12     |
|----+----+----+----+-------+----+-------+-------+-------+---------+---------+---------|
|    |    |    |    |       |    |       |       |       | KC_MSEL | KC_MPLY | KC_MSTP |
|    |    |    |    |       |    | KC_22 | KC_23 | KC_24 |         |         | KC_MNXT |
|    |    |    |    |       |    | KC_19 | KC_20 | KC_21 |         |         | KC_MPRV |
|    |    |    |    |       |    | KC_16 | KC_17 | KC_18 |         | KC_VOLU |         |
|    |    |    |    | KC_NO |    | KC13  | KC_14 | KC_15 | KC_MRWD | KC_VOLD | KC_MFFD |
|----+----+----+----+-------+----+-------+-------+-------+---------+---------+---------|
#+begin_src c :tangle jeep.c
#include QMK_KEYBOARD_H
/* THIS FILE WAS GENERATED by preonic-layout-jeep.org */
enum custom_keycodes {
    KC_00 = SAFE_RANGE,
};
bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
    case KC_00:
        if (record->event.pressed) {
            SEND_STRING("00");
        } else {
        }
        break;
    }
    return true;
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
[0] = LAYOUT_ortho_5x12(
 KC_ESC  , KC_NLCK        , KC_PERC , KC_LPAREN , KC_RPAREN , KC_KP_SLASH   , KC_BSPC , KC_MUTE , KC_APP , KC_PSCR , KC_SLCK , KC_BRK  ,
, S(E)    , S(F)           , KC_7    , KC_8      , KC_9      , KC_PAST       , KC_F10  , KC_F11  , KC_F12 , KC_INS  , KC_HOME , KC_PGUP ,
, S(C)    , S(D)           , KC_4    , KC_5      , KC_6      , KC_PMNS       , KC_F7   , KC_F8   , KC_F9  , KC_DEL  , KC_END  , KC_PGDN ,
, S(A)    , S(B)           , KC_1    , KC_2      , KS_3      , KC_PPLS       , KC_F4   , KC_F5   , KC_F6  , LCTL(KC_MINS) , KC_UP   , LCTL(KC_PLUS) ,
, KC_PENT , LALT_T(KC_SPC) , KC_0    , KC_00     , KC_PDOT   , LT(1,KC_PEQL) , KC_F1   , KC_F2   , KC_F3  , KC_RGHT , KC_DOWN , KC_LEFT) ,
	[1] = LAYOUT_ortho_5x12(
        KC_NO   ,   KC_NO    , KC_NO      , KC_NO      , KC_NO         ,KC_NO       ,KC_NO          ,KC_NO          ,KC_NO          , KC_MSEL , KC_MPLY , KC_MSTP ,
KC_NO ,KC_NO       ,KC_NO       ,KC_NO       ,KC_NO       ,KC_NO          ,KC_NO       , KC_F22 , KC_F23 , KC_F24 ,KC_NO            ,KC_NO            , KC_MNXT ,
KC_NO ,KC_NO       ,KC_NO       ,KC_NO       ,KC_NO       ,KC_NO          ,KC_NO       , KC_F19 , KC_F20 , KC_F21 ,KC_NO            ,KC_NO            , KC_MPRV ,
KC_NO ,KC_NO       ,KC_NO       ,KC_NO       ,KC_NO       ,KC_NO          ,KC_NO       , KC_F16 , KC_F17 , KC_F18 ,  KC_NO          , KC_VOLU ,KC_NO            ,
KC_NO ,KC_NO       ,KC_NO       ,KC_NO       ,KC_NO       , KC_NO ,KC_NO       , KC_F13  , KC_F14 , KC_F15 , KC_MRWD , KC_VOLD , KC_MFFD )
};

#+end_src
